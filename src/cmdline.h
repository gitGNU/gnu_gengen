/* cmdline.h */

/* File autogenerated by gengetopt version 2.18  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION VERSION
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  char * input_arg;	/* input file (default std input).  */
  char * input_orig;	/* input file (default std input) original value given at command line.  */
  const char *input_help; /* input file (default std input) help description.  */
  char * file_name_arg;	/* name used for generating file (default stdout).  */
  char * file_name_orig;	/* name used for generating file (default stdout) original value given at command line.  */
  const char *file_name_help; /* name used for generating file (default stdout) help description.  */
  char * gen_name_arg;	/* prefix for generated code (default='gengen').  */
  char * gen_name_orig;	/* prefix for generated code original value given at command line.  */
  const char *gen_name_help; /* prefix for generated code help description.  */
  char * output_format_arg;	/* target language (cpp, c) (default='cpp').  */
  char * output_format_orig;	/* target language (cpp, c) original value given at command line.  */
  const char *output_format_help; /* target language (cpp, c) help description.  */
  const char *separate_files_help; /* output to separate files (header, source). require --file-name help description.  */
  const char *expand_tabs_help; /* strings containing newlines are indented according to the current indentation level help description.  */
  const char *no_gen_version_help; /* do not put gengen version in the generated file help description.  */
  const char *test_mode_help; /* even with errors exit with 0 (this is only for testing purposes) help description.  */
  const char *force_help; /* force regeneration of output code help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int input_given ;	/* Whether input was given.  */
  int file_name_given ;	/* Whether file-name was given.  */
  int gen_name_given ;	/* Whether gen-name was given.  */
  int output_format_given ;	/* Whether output-format was given.  */
  int separate_files_given ;	/* Whether separate-files was given.  */
  int expand_tabs_given ;	/* Whether expand-tabs was given.  */
  int no_gen_version_given ;	/* Whether no-gen-version was given.  */
  int test_mode_given ;	/* Whether test-mode was given.  */
  int force_given ;	/* Whether force was given.  */

} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
