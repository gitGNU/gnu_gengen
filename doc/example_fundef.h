/*
 * File automatically generated by
 * gengen 0.4.5 by Lorenzo Bettini <http://www.lorenzobettini.it>
 * http://www.gnu.org/software/gengen
 */

#ifndef EXAMPLE_FUNDEF_GEN_STRUCT_H
#define EXAMPLE_FUNDEF_GEN_STRUCT_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct example_fundef_gen_struct
{
  const char *funbody;
  const char *funname;
  const char *param;
  const char *paramtype;
  const char *rettype;
};

extern void generate_funbody(FILE *stream, struct example_fundef_gen_struct *record, unsigned int indent);
  

void
generate_example_fundef(FILE *stream, struct example_fundef_gen_struct *record, unsigned int indent);

void
generatep_example_fundef(FILE *stream, unsigned int indent, const char *funbody, const char *funname, const char *param, const char *paramtype, const char *rettype);

char *
genstring_example_fundef(struct example_fundef_gen_struct *record, unsigned int indent);

char *
genstringp_example_fundef(unsigned int indent, const char *funbody, const char *funname, const char *param, const char *paramtype, const char *rettype);

int
strcnt_example_fundef(struct example_fundef_gen_struct *record, unsigned int indent);

void
init_example_fundef_gen_struct(struct example_fundef_gen_struct *record);

void
generate_example_fundef(FILE *stream, struct example_fundef_gen_struct *record, unsigned int indent)
{
  char *indent_str;
  unsigned int i;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';
  indent = 0;

  fprintf (stream, "%s", record->rettype);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", record->funname);
  fprintf (stream, "%s", "(");
  fprintf (stream, "%s", record->paramtype);
  fprintf (stream, "%s", " ");
  fprintf (stream, "%s", record->param);
  fprintf (stream, "%s", ")");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "{");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  indent = 2;
  fprintf (stream, "%s", "  ");
  if (record->funbody)
    fprintf (stream, "%s", record->funbody);
  else
    generate_funbody (stream, record, indent + strlen (indent_str));
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "}");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
}

void
generatep_example_fundef(FILE *stream, unsigned int indent, const char *funbody, const char *funname, const char *param, const char *paramtype, const char *rettype)
{
  struct example_fundef_gen_struct record;
  
  record.funbody = funbody;
  record.funname = funname;
  record.param = param;
  record.paramtype = paramtype;
  record.rettype = rettype;

  generate_example_fundef (stream, &record, indent);
}

char *
genstring_example_fundef(struct example_fundef_gen_struct *record, unsigned int indent)
{
  char *indent_str, *output;
  unsigned int i;
  int len;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';

  len = strcnt_example_fundef (record, indent);
  output = (char *) malloc (len + 1);
  output[0] = '\0';

  if (record->rettype) strcat (output, record->rettype);
  strcat (output, "\n");
  strcat (output, indent_str);
  if (record->funname) strcat (output, record->funname);
  strcat (output, "(");
  if (record->paramtype) strcat (output, record->paramtype);
  strcat (output, " ");
  if (record->param) strcat (output, record->param);
  strcat (output, ")");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "{");
  strcat (output, "\n");
  strcat (output, indent_str);
    strcat (output, "  ");
  if (record->funbody) strcat (output, record->funbody);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "}");
  strcat (output, "\n");
  strcat (output, indent_str);

  return output;
}

char *
genstringp_example_fundef(unsigned int indent, const char *funbody, const char *funname, const char *param, const char *paramtype, const char *rettype)
{
  struct example_fundef_gen_struct record;
  
  record.funbody = funbody;
  record.funname = funname;
  record.param = param;
  record.paramtype = paramtype;
  record.rettype = rettype;

  return genstring_example_fundef (&record, indent);
}

int
strcnt_example_fundef(struct example_fundef_gen_struct *record, unsigned int indent)
{
  int length = 0;

  length += (record->rettype ? strlen (record->rettype) : 0) * 1;
  length += (record->funname ? strlen (record->funname) : 0) * 1;
  length += (record->paramtype ? strlen (record->paramtype) : 0) * 1;
  length += (record->param ? strlen (record->param) : 0) * 1;
  length += (record->funbody ? strlen (record->funbody) : 0) * 1;

  return length + 22;
}

void
init_example_fundef_gen_struct(struct example_fundef_gen_struct *record)
{
  record->funbody = 0;
  record->funname = 0;
  record->param = 0;
  record->paramtype = 0;
  record->rettype = 0;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif // EXAMPLE_FUNDEF_GEN_STRUCT_H
