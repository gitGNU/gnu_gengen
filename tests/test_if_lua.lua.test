
--[[
    File automatically generated by
    gengen 1.4.3 by Lorenzo Bettini 
    http://www.gnu.org/software/gengen
--]]

-- Field table
test_if_gen_table = {
  boolvar,
  intvar,
  intvarcomp,
  mydef,
  myvar,
  stringvar,
  stringvarcomp,
}


function generate_test_if(stream, record, indent)
  local id = {}
  local indent_str = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)
  -- save context
  local ctx = io.output()
  io.output(stream)

  io.write("#include <iostream>")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("using std::cout;")
  io.write("\n")
  io.write(indent_str)
  io.write("using std::endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("#define MYVAR ")
  io.write((record.myvar) and record.myvar or ""
)
  io.write("\n")
  io.write(indent_str)
  io.write("#define ")
  io.write((record.mydef) and record.mydef or ""
)
  io.write(" ")
  io.write((record.myvar) and record.myvar or ""
)
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("int")
  io.write("\n")
  io.write(indent_str)
  io.write("main()")
  io.write("\n")
  io.write(indent_str)
  io.write("{")
  io.write("\n")
  io.write(indent_str)
  
  if (record.boolvar) then
    io.write("  cout << \"boolvar test\" << endl;")
    io.write("\n")
    io.write(indent_str)
  
  else
    if (( ( record.intvar < record.intvarcomp ) or ( record.intvar == 0 ) )) then
      io.write("  cout << \"intvar test\" << endl;")
      io.write("\n")
      io.write(indent_str)
    end
  end
  
  
  if (( ( record.stringvar < record.stringvarcomp ) or ( ( record.stringvar ~= "foo" ) and ( record.stringvar < "bara" ) ) )) then
    io.write("  cout << \"stringvar value: \" << ")
    io.write((record.stringvar) and record.stringvar or ""
    )
    io.write(" << endl;")
    io.write("\n")
    io.write(indent_str)
  end
  
  io.write("\n")
  io.write(indent_str)
  io.write("  return 0;")
  io.write("\n")
  io.write(indent_str)
  io.write("}")
  io.write("\n")
  io.write(indent_str)

  -- restore context
  io.output(ctx)
end

function generatep_test_if(stream, indent, boolvar, intvar, intvarcomp, mydef, myvar, stringvar, stringvarcomp)
  record = {}
  
  record.boolvar = boolvar
  record.intvar = intvar
  record.intvarcomp = intvarcomp
  record.mydef = mydef
  record.myvar = myvar
  record.stringvar = stringvar
  record.stringvarcomp = stringvarcomp

  generate_test_if(stream, record, indent)
end

function genstring_test_if(record, indent)
  local id = {}
  local indent_str = ""
  local output = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)

  output = output .. "#include <iostream>"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "using std::cout;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "using std::endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "#define MYVAR "
  if (record.myvar) then output = output .. record.myvar end
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "#define "
  if (record.mydef) then output = output .. record.mydef end
  output = output .. " "
  if (record.myvar) then output = output .. record.myvar end
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "int"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "main()"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "{"
  output = output .. "\n"
  output = output .. indent_str
  
  if (record.boolvar) then
    output = output .. "  cout << \"boolvar test\" << endl;"
    output = output .. "\n"
    output = output .. indent_str
  
  else
    if (( ( record.intvar < record.intvarcomp ) or ( record.intvar == 0 ) )) then
      output = output .. "  cout << \"intvar test\" << endl;"
      output = output .. "\n"
      output = output .. indent_str
    end
  end
  
  
  if (( ( record.stringvar < record.stringvarcomp ) or ( ( record.stringvar ~= "foo" ) and ( record.stringvar < "bara" ) ) )) then
    output = output .. "  cout << \"stringvar value: \" << "
    if (record.stringvar) then output = output .. record.stringvar end
    output = output .. " << endl;"
    output = output .. "\n"
    output = output .. indent_str
  end
  
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  return 0;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "}"
  output = output .. "\n"
  output = output .. indent_str
  return output;
end

function genstringp_test_if(indent, boolvar, intvar, intvarcomp, mydef, myvar, stringvar, stringvarcomp)
  record = {}
  
  record.boolvar = boolvar
  record.intvar = intvar
  record.intvarcomp = intvarcomp
  record.mydef = mydef
  record.myvar = myvar
  record.stringvar = stringvar
  record.stringvarcomp = stringvarcomp

  return genstring_test_if (record, indent);
end

function strcnt_test_if(record, indent)
  local length = 0;
  
  length = length + ((record.myvar) and string.len(record.myvar) or 0) * 2;
  length = length + ((record.mydef) and string.len(record.mydef) or 0) * 1;

  if (record.boolvar) then
    

  
  else
    if (( ( record.intvar < record.intvarcomp ) or ( record.intvar == 0 ) )) then
      
    
    end
  end
  

  if (( ( record.stringvar < record.stringvarcomp ) or ( ( record.stringvar ~= "foo" ) and ( record.stringvar < "bara" ) ) )) then
    length = length + ((record.stringvar) and string.len(record.stringvar) or 0) * 1;
  end
  

  return length + 248;
end

function init_test_if_gen_table(record)
  record.boolvar = nil
  record.intvar = nil
  record.intvarcomp = nil
  record.mydef = nil
  record.myvar = nil
  record.stringvar = nil
  record.stringvarcomp = nil
end

