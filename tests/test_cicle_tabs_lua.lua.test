
--[[
    File automatically generated by
    gengen 1.4.3 by Lorenzo Bettini 
    http://www.gnu.org/software/gengen
--]]

-- Field table
test_cicle_gen_table = {
  loop,
  loopnum,
  return_st,
}


function generate_test_cicle(stream, record, indent)
  local id = {}
  local indent_str = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)
  -- save context
  local ctx = io.output()
  io.output(stream)

  io.write("#include <iostream>")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("using std::cout;")
  io.write("\n")
  io.write(indent_str)
  io.write("using std::endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("#define NUM_OF_LOOPS ")
  io.write((record.loopnum) and record.loopnum or ""
)
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("int")
  io.write("\n")
  io.write(indent_str)
  io.write("main()")
  io.write("\n")
  io.write(indent_str)
  io.write("{")
  io.write("\n")
  io.write(indent_str)
  io.write("  cout << \"The val of NUM_OF_LOOPS is \";")
  io.write("\n")
  io.write(indent_str)
  io.write("  cout << ")
  io.write((record.loopnum) and record.loopnum or ""
)
  io.write(" << endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  indent = 2;
  io.write("  ")
  io.write((record.loop) and record.loop or ""
)
  indent = 0;
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  indent = 2;
  io.write("  ")
  io.write((record.return_st) and record.return_st or ""
)
  indent = 0;
  io.write("\n")
  io.write(indent_str)
  io.write("}")
  io.write("\n")
  io.write(indent_str)

  -- restore context
  io.output(ctx)
end

function generatep_test_cicle(stream, indent, loop, loopnum, return_st)
  record = {}
  
  record.loop = loop
  record.loopnum = loopnum
  record.return_st = return_st

  generate_test_cicle(stream, record, indent)
end

function genstring_test_cicle(record, indent)
  local id = {}
  local indent_str = ""
  local output = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)

  output = output .. "#include <iostream>"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "using std::cout;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "using std::endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "#define NUM_OF_LOOPS "
  if (record.loopnum) then output = output .. record.loopnum end
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "int"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "main()"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "{"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  cout << \"The val of NUM_OF_LOOPS is \";"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  cout << "
  if (record.loopnum) then output = output .. record.loopnum end
  output = output .. " << endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  "
  if (record.loop) then output = output .. record.loop end
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  "
  if (record.return_st) then output = output .. record.return_st end
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "}"
  output = output .. "\n"
  output = output .. indent_str
  return output;
end

function genstringp_test_cicle(indent, loop, loopnum, return_st)
  record = {}
  
  record.loop = loop
  record.loopnum = loopnum
  record.return_st = return_st

  return genstring_test_cicle (record, indent);
end

function strcnt_test_cicle(record, indent)
  local length = 0;
  
  length = length + ((record.loopnum) and string.len(record.loopnum) or 0) * 2;
  length = length + ((record.loop) and string.len(record.loop) or 0) * 1;
  length = length + ((record.return_st) and string.len(record.return_st) or 0) * 1;

  return length + 197;
end

function init_test_cicle_gen_table(record)
  record.loop = nil
  record.loopnum = nil
  record.return_st = nil
end

