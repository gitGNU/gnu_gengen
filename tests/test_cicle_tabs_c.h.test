/*
 * File automatically generated by
 * gengen  by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef TEST_CICLE_GEN_STRUCT_H
#define TEST_CICLE_GEN_STRUCT_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct test_cicle_gen_struct
{
  const char *loop;
  const char *loopnum;
  const char *return_st;
};

void
generate_test_cicle(FILE *stream, struct test_cicle_gen_struct *record, unsigned int indent);

void
generatep_test_cicle(FILE *stream, unsigned int indent, const char *loop, const char *loopnum, const char *return_st);

char *
genstring_test_cicle(struct test_cicle_gen_struct *record, unsigned int indent);

char *
genstringp_test_cicle(unsigned int indent, const char *loop, const char *loopnum, const char *return_st);

int
strcnt_test_cicle(struct test_cicle_gen_struct *record, unsigned int indent);

void
init_test_cicle_gen_struct(struct test_cicle_gen_struct *record);


static void
generate_string(const char *s, FILE *stream, unsigned int indent)
{
  const char *sub = s;
  char *indent_str;
  unsigned int i;

  if (!indent || strchr (s, '\n') == 0)
    {
      fprintf (stream, "%s", s);
      return;
    }

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';

  while ( (sub=strchr (s, '\n')) != 0 )
    {
      fwrite (s, sizeof(char), (sub-s)+1, stream);
      s = sub+1;
      if (s[0])
        fprintf (stream, "%s", indent_str);
    }
  if (s[0])
    fwrite (s, sizeof(char), strlen (s), stream);

  free (indent_str);
}

void
generate_test_cicle(FILE *stream, struct test_cicle_gen_struct *record, unsigned int indent)
{
  char *indent_str;
  unsigned int i;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';
  indent = 0;

  fprintf (stream, "%s", "#include <iostream>");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "using std::cout;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "using std::endl;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "#define NUM_OF_LOOPS ");
  generate_string ((record->loopnum ? record->loopnum : ""), stream, indent + strlen (indent_str));
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "int");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "main()");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "{");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "  cout << \"The val of NUM_OF_LOOPS is \";");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "  cout << ");
  generate_string ((record->loopnum ? record->loopnum : ""), stream, indent + strlen (indent_str));
  fprintf (stream, "%s", " << endl;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  indent = 2;
  fprintf (stream, "%s", "  ");
  generate_string ((record->loop ? record->loop : ""), stream, indent + strlen (indent_str));
  indent = 0;
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  indent = 2;
  fprintf (stream, "%s", "  ");
  generate_string ((record->return_st ? record->return_st : ""), stream, indent + strlen (indent_str));
  indent = 0;
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "}");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);

  free (indent_str);
}

void
generatep_test_cicle(FILE *stream, unsigned int indent, const char *loop, const char *loopnum, const char *return_st)
{
  struct test_cicle_gen_struct record;
  
  record.loop = loop;
  record.loopnum = loopnum;
  record.return_st = return_st;

  generate_test_cicle (stream, &record, indent);
}

char *
genstring_test_cicle(struct test_cicle_gen_struct *record, unsigned int indent)
{
  char *indent_str, *output;
  unsigned int i;
  int len;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';

  len = strcnt_test_cicle (record, indent);
  output = (char *) malloc (len + 1);
  output[0] = '\0';

  strcat (output, "#include <iostream>");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "using std::cout;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "using std::endl;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "#define NUM_OF_LOOPS ");
  if (record->loopnum) strcat (output, record->loopnum);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "int");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "main()");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "{");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  cout << \"The val of NUM_OF_LOOPS is \";");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  cout << ");
  if (record->loopnum) strcat (output, record->loopnum);
  strcat (output, " << endl;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  ");
  if (record->loop) strcat (output, record->loop);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  ");
  if (record->return_st) strcat (output, record->return_st);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "}");
  strcat (output, "\n");
  strcat (output, indent_str);

  free (indent_str);

  return output;
}

char *
genstringp_test_cicle(unsigned int indent, const char *loop, const char *loopnum, const char *return_st)
{
  struct test_cicle_gen_struct record;
  
  record.loop = loop;
  record.loopnum = loopnum;
  record.return_st = return_st;

  return genstring_test_cicle (&record, indent);
}

int
strcnt_test_cicle(struct test_cicle_gen_struct *record, unsigned int indent)
{
  int length = 0;
  
  length += (record->loopnum ? strlen (record->loopnum) : 0) * 2;
  length += (record->loop ? strlen (record->loop) : 0) * 1;
  length += (record->return_st ? strlen (record->return_st) : 0) * 1;

  return length + 197;
}

void
init_test_cicle_gen_struct(struct test_cicle_gen_struct *record)
{
  record->loop = 0;
  record->loopnum = 0;
  record->return_st = 0;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif // TEST_CICLE_GEN_STRUCT_H
