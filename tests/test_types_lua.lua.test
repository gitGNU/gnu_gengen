
--[[
    File automatically generated by
    gengen 1.4.3 by Lorenzo Bettini 
    http://www.gnu.org/software/gengen
--]]

-- Field table
test_types_gen_table = {
  mybool,
  myint,
  mystring,
}



function int_to_string(i)
  return tostring(i)
end



function bool_to_string(b)
  return b
end


function generate_test_types(stream, record, indent)
  local id = {}
  local indent_str = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)
  -- save context
  local ctx = io.output()
  io.output(stream)

  io.write("#include <iostream>")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("using namespace std;")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("int main()")
  io.write("\n")
  io.write(indent_str)
  io.write("{")
  io.write("\n")
  io.write(indent_str)
  io.write("  cout << \"this is a string: \" << ")
  io.write((record.mystring) and record.mystring or ""
)
  io.write(" << endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("  cout << \"this is an int: \" << ")
  io.write(record.myint)
  io.write(" << endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("  cout << \"this is a bool: \" << ")
  io.write(record.mybool)
  io.write(" << endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("  return 0;")
  io.write("\n")
  io.write(indent_str)
  io.write("}")
  io.write("\n")
  io.write(indent_str)

  -- restore context
  io.output(ctx)
end

function generatep_test_types(stream, indent, mybool, myint, mystring)
  record = {}
  
  record.mybool = mybool
  record.myint = myint
  record.mystring = mystring

  generate_test_types(stream, record, indent)
end

function genstring_test_types(record, indent)
  local id = {}
  local indent_str = ""
  local output = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)

  output = output .. "#include <iostream>"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "using namespace std;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "int main()"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "{"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  cout << \"this is a string: \" << "
  if (record.mystring) then output = output .. record.mystring end
  output = output .. " << endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  cout << \"this is an int: \" << "
  output = output .. int_to_string(record.myint)
  output = output .. " << endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  cout << \"this is a bool: \" << "
  output = output .. bool_to_string(record.mybool)
  output = output .. " << endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  return 0;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "}"
  output = output .. "\n"
  output = output .. indent_str
  return output;
end

function genstringp_test_types(indent, mybool, myint, mystring)
  record = {}
  
  record.mybool = mybool
  record.myint = myint
  record.mystring = mystring

  return genstring_test_types (record, indent);
end

function strcnt_test_types(record, indent)
  local length = 0;
  
  length = length + ((record.mystring) and string.len(record.mystring) or 0) * 1;
  length = length + string.len(int_to_string(record.myint)) * 1;
  length = length + string.length(bool_to_string(record.mybool)) * 1;

  return length + 223;
end

function init_test_types_gen_table(record)
  record.mybool = nil
  record.myint = nil
  record.mystring = nil
end

