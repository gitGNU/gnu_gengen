/*
 * File automatically generated by
 * gengen  by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef TEST_CICLE_GEN_CLASS_H
#define TEST_CICLE_GEN_CLASS_H

#include <string>
#include <iostream>

using std::string;
using std::ostream;

class test_cicle_gen_class
{
 protected:
  string loop;
  string loopnum;
  bool printnumloop;
  bool printsomething;
  string return_st;
  bool zeroloops;

 public:
  test_cicle_gen_class() :
    printnumloop (false), printsomething (false), zeroloops (false)
  {
  }
  
  test_cicle_gen_class(const string &_loop, const string &_loopnum, bool _printnumloop, bool _printsomething, const string &_return_st, bool _zeroloops) :
    loop (_loop), loopnum (_loopnum), printnumloop (_printnumloop), printsomething (_printsomething), return_st (_return_st), zeroloops (_zeroloops)
  {
  }

  virtual ~test_cicle_gen_class()
  {
  }

  static void
  generate_string(const string &s, ostream &stream, unsigned int indent)
  {
    if (!indent || s.find('\n') == string::npos)
      {
        stream << s;
        return;
      }

    string::size_type pos;
    string::size_type start = 0;
    string ind (indent, ' ');
    while ( (pos=s.find('\n', start)) != string::npos)
      {
        stream << s.substr (start, (pos+1)-start);
        start = pos+1;
        if (start+1 <= s.size ())
          stream << ind;
      }
    if (start+1 <= s.size ())
      stream << s.substr (start);
  }

  virtual void generate_loop(ostream &stream, unsigned int indent) = 0;

  void set_loop(const string &_loop)
  {
    loop = _loop;
  }

  void set_loopnum(const string &_loopnum)
  {
    loopnum = _loopnum;
  }

  void set_printnumloop(bool _printnumloop)
  {
    printnumloop = _printnumloop;
  }

  void set_printsomething(bool _printsomething)
  {
    printsomething = _printsomething;
  }

  virtual void generate_return_st(ostream &stream, unsigned int indent) = 0;

  void set_return_st(const string &_return_st)
  {
    return_st = _return_st;
  }

  void set_zeroloops(bool _zeroloops)
  {
    zeroloops = _zeroloops;
  }

  void generate_test_cicle(ostream &stream, unsigned int indent = 0)
  {
    string indent_str (indent, ' ');
    indent = 0;
  
    stream << "#include <iostream>";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "using std::cout;";
    stream << "\n";
    stream << indent_str;
    stream << "using std::endl;";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "#define NUM_OF_LOOPS ";
    stream << loopnum;
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "int";
    stream << "\n";
    stream << indent_str;
    stream << "main()";
    stream << "\n";
    stream << indent_str;
    stream << "{";
    stream << "\n";
    stream << indent_str;
    stream << "  cout << \"The val of NUM_OF_LOOPS is \";";
    stream << "\n";
    stream << indent_str;
    stream << "  cout << ";
    stream << loopnum;
    stream << " << endl;";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    if (zeroloops)
      {
        stream << "  /*";
        stream << "\n";
        stream << indent_str;
        stream << "   * No loop generated since NUM_OF_LOOPS is 0";
        stream << "\n";
        stream << indent_str;
        stream << "   */";
        stream << "\n";
        stream << indent_str;
      }
    else
      {
        if (printsomething)
          {
            if (printnumloop)
              {
                stream << "  cout << \"zero loops: \" << ";
                stream << loopnum;
                stream << " << endl;";
                stream << "\n";
                stream << indent_str;
              }
            else
              {
                stream << "  cout << \"zero loops!\" << endl;";
                stream << "\n";
                stream << indent_str;
              }
          }
        else
          {
            indent = 2;
            stream << "  ";
            if (loop.size () > 0)
              generate_string (loop, stream, indent + indent_str.length ());
            else
              generate_loop (stream, indent + indent_str.length ());
            indent = 0;
            stream << "\n";
            stream << indent_str;
            if (zeroloops)
              {
                
            
              }
            else
              {
                
            
              }
            if (zeroloops)
              {
                
            
              }
            else
              {
                
            
              }
            if (zeroloops)
              {
                
            
              }
          }
      }
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    if (return_st.size () > 0)
      generate_string (return_st, stream, indent + indent_str.length ());
    else
      generate_return_st (stream, indent + indent_str.length ());
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "}";
    stream << "\n";
    stream << indent_str;
  }
};

#endif // TEST_CICLE_GEN_CLASS_H
