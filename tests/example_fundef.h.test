/*
 * File automatically generated by
 * gengen  by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef EXAMPLE_FUNDEF_GEN_CLASS_H
#define EXAMPLE_FUNDEF_GEN_CLASS_H

#include <string>
#include <iostream>

using std::string;
using std::ostream;

class example_fundef_gen_class
{
 protected:
  string funbody;
  string funname;
  string param;
  string paramtype;
  string rettype;

 public:
  example_fundef_gen_class()
  {
  }
  
  example_fundef_gen_class(const string &_funbody, const string &_funname, const string &_param, const string &_paramtype, const string &_rettype) :
    funbody (_funbody), funname (_funname), param (_param), paramtype (_paramtype), rettype (_rettype)
  {
  }

  virtual ~example_fundef_gen_class()
  {
  }

  static void
  generate_string(const string &s, ostream &stream, unsigned int indent)
  {
    if (!indent || s.find('\n') == string::npos)
      {
        stream << s;
        return;
      }

    string::size_type pos;
    string::size_type start = 0;
    string ind (indent, ' ');
    while ( (pos=s.find('\n', start)) != string::npos)
      {
        stream << s.substr (start, (pos+1)-start);
        start = pos+1;
        if (start+1 <= s.size ())
          stream << ind;
      }
    if (start+1 <= s.size ())
      stream << s.substr (start);
  }

  virtual void generate_funbody(ostream &stream, unsigned int indent) = 0;

  void set_funbody(const string &_funbody)
  {
    funbody = _funbody;
  }

  void set_funname(const string &_funname)
  {
    funname = _funname;
  }

  void set_param(const string &_param)
  {
    param = _param;
  }

  void set_paramtype(const string &_paramtype)
  {
    paramtype = _paramtype;
  }

  void set_rettype(const string &_rettype)
  {
    rettype = _rettype;
  }

  void generate_example_fundef(ostream &stream, unsigned int indent = 0)
  {
    string indent_str (indent, ' ');
    indent = 0;
  
    stream << rettype;
    stream << "\n";
    stream << indent_str;
    stream << funname;
    stream << "(";
    stream << paramtype;
    stream << " ";
    stream << param;
    stream << ")";
    stream << "\n";
    stream << indent_str;
    stream << "{";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    if (funbody.size () > 0)
      generate_string (funbody, stream, indent + indent_str.length ());
    else
      generate_funbody (stream, indent + indent_str.length ());
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "}";
  }
};

#endif // EXAMPLE_FUNDEF_GEN_CLASS_H
