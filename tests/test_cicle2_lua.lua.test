
--[[
    File automatically generated by
    gengen 1.4.3rc by Lorenzo Bettini 
    http://www.gnu.org/software/gengen
--]]

dofile("test_cicle2_lua.header")


function strchr_tab(tab, char)
  local store
  local ret_str = ""
  for w, k in ipairs(tab) do
    if(k == char) then
      store = w
      break
    end
  end
  if(store == nil) then
    return nil
  end
  for i = store, #tab do
    ret_str = ret_str .. tab[i]
  end
  return store, ret_str
end

function str_to_tab(str)
  tab = {}
  for i in string.gmatch(str, ".") do
    table.insert(tab, i)
  end
  return tab
end

function generate_string(s, stream, indent)
  local subs = s
  local indent_str = ""
  local id = {}
  local pos = 0
  local my_tab = str_to_tab(s)

  -- save context
  local ctx = io.output()
  io.output(stream)

  if((indent == 0) or (strchr_tab(my_tab, "\n") == nil)) then
    io.write(s)
    return
  end

  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)

  while(true) do
    pos, subs = strchr_tab(str_to_tab(s), '\n')
    if(subs == nil) then break end
    io.write(table.concat(my_tab, "", 1, pos))
    s = subs:sub(2)
    my_tab = str_to_tab(s)
    if(s ~= "") then
      io.write(indent_str);
    end
  end
  if(s) then
    io.write(s)
  end

  -- restore context
  io.output(ctx)
end

function generate_test_cicle_gen(stream, record, indent)
  local id = {}
  local indent_str = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)
  -- save context
  local ctx = io.output()
  io.output(stream)

  io.write("#include <iostream>")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("using std::cout;")
  io.write("\n")
  io.write(indent_str)
  io.write("using std::endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("#define NUM_OF_LOOPS ")
  io.write((record.loopnum) and record.loopnum or ""
)
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("int")
  io.write("\n")
  io.write(indent_str)
  io.write("main()")
  io.write("\n")
  io.write(indent_str)
  io.write("{")
  io.write("\n")
  io.write(indent_str)
  io.write("  cout << \"The val of NUM_OF_LOOPS is \";")
  io.write("\n")
  io.write(indent_str)
  io.write("  cout << ")
  io.write((record.loopnum) and record.loopnum or ""
)
  io.write(" << endl;")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  
  if (record.zeroloops) then
    io.write("  /*")
    io.write("\n")
    io.write(indent_str)
    io.write("   * No loop generated since NUM_OF_LOOPS is 0")
    io.write("\n")
    io.write(indent_str)
    io.write("   */")
    io.write("\n")
    io.write(indent_str)
  
  else
    if (record.printsomething) then
      if (record.printnumloop) then
        io.write("  cout << \"zero loops: \" << ")
        io.write((record.loopnum) and record.loopnum or ""
        )
        io.write(" << endl;")
        io.write("\n")
        io.write(indent_str)
      
      else
        io.write("  cout << \"zero loops!\" << endl;")
        io.write("\n")
        io.write(indent_str)
      end
    
    else
      indent = 2;
      io.write("  ")
      
      if(record.loop) then
        generate_string(record.loop, stream, indent + string.len(indent_str))
      else
        generate_loop(stream, record, indent + string.len(indent_str))
      end
      
      indent = 0;
      io.write("\n")
      io.write(indent_str)
      
      if (record.zeroloops) then
        
      
      
      else
        
      
      end
      
      
      if (record.zeroloops) then
        
      
      
      else
        
      
      end
      
      
      if (record.zeroloops) then
        
      
      end
    end
  end
  
  io.write("\n")
  io.write(indent_str)
  indent = 2;
  io.write("  ")
  
  if(record.return_st) then
    generate_string(record.return_st, stream, indent + string.len(indent_str))
  else
    generate_return_st(stream, record, indent + string.len(indent_str))
  end
  
  indent = 0;
  io.write("\n")
  io.write(indent_str)
  io.write("}")
  io.write("\n")
  io.write(indent_str)

  -- restore context
  io.output(ctx)
end

function generatep_test_cicle_gen(stream, indent, loop, loopnum, printnumloop, printsomething, return_st, zeroloops)
  record = {}
  
  record.loop = loop
  record.loopnum = loopnum
  record.printnumloop = printnumloop
  record.printsomething = printsomething
  record.return_st = return_st
  record.zeroloops = zeroloops

  generate_test_cicle_gen(stream, record, indent)
end

function genstring_test_cicle_gen(record, indent)
  local id = {}
  local indent_str = ""
  local output = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)

  output = output .. "#include <iostream>"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "using std::cout;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "using std::endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "#define NUM_OF_LOOPS "
  if (record.loopnum) then output = output .. record.loopnum end
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "int"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "main()"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "{"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  cout << \"The val of NUM_OF_LOOPS is \";"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  cout << "
  if (record.loopnum) then output = output .. record.loopnum end
  output = output .. " << endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  
  if (record.zeroloops) then
    output = output .. "  /*"
    output = output .. "\n"
    output = output .. indent_str
    output = output .. "   * No loop generated since NUM_OF_LOOPS is 0"
    output = output .. "\n"
    output = output .. indent_str
    output = output .. "   */"
    output = output .. "\n"
    output = output .. indent_str
  
  else
    if (record.printsomething) then
      if (record.printnumloop) then
        output = output .. "  cout << \"zero loops: \" << "
        if (record.loopnum) then output = output .. record.loopnum end
        output = output .. " << endl;"
        output = output .. "\n"
        output = output .. indent_str
      
      else
        output = output .. "  cout << \"zero loops!\" << endl;"
        output = output .. "\n"
        output = output .. indent_str
      end
    
    else
      output = output .. "  "
      if (record.loop) then output = output .. record.loop end
      output = output .. "\n"
      output = output .. indent_str
      
      if (record.zeroloops) then
        
      
      
      else
        
      
      end
      
      
      if (record.zeroloops) then
        
      
      
      else
        
      
      end
      
      
      if (record.zeroloops) then
        
      
      end
    end
  end
  
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "  "
  if (record.return_st) then output = output .. record.return_st end
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "}"
  output = output .. "\n"
  output = output .. indent_str
  return output;
end

function genstringp_test_cicle_gen(indent, loop, loopnum, printnumloop, printsomething, return_st, zeroloops)
  record = {}
  
  record.loop = loop
  record.loopnum = loopnum
  record.printnumloop = printnumloop
  record.printsomething = printsomething
  record.return_st = return_st
  record.zeroloops = zeroloops

  return genstring_test_cicle_gen (record, indent);
end

function strcnt_test_cicle_gen(record, indent)
  local length = 0;
  
  length = length + ((record.loopnum) and string.len(record.loopnum) or 0) * 3;

  if (record.zeroloops) then
    

  
  else
    if (record.printsomething) then
      if (record.printnumloop) then
        
      
      
      else
        
      
      end
    
    else
      length = length + ((record.loop) and string.len(record.loop) or 0) * 1;
      
      if (record.zeroloops) then
        
      
      
      else
        
      
      end
      
      
      if (record.zeroloops) then
        
      
      
      else
        
      
      end
      
      
      if (record.zeroloops) then
        
      
      end
    end
  end
  
  length = length + ((record.return_st) and string.len(record.return_st) or 0) * 1;

  return length + 324;
end

function init_test_cicle_gen_gen_table(record)
  record.loop = nil
  record.loopnum = nil
  record.printnumloop = nil
  record.printsomething = nil
  record.return_st = nil
  record.zeroloops = nil
end

