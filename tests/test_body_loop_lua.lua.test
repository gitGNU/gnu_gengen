
--[[
    File automatically generated by
    gengen 1.4.3 by Lorenzo Bettini 
    http://www.gnu.org/software/gengen
--]]

-- Field table
test_body_loop_gen_table = {
  my_end,
  my_start,
}


function generate_test_body_loop(stream, record, indent)
  local id = {}
  local indent_str = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)
  -- save context
  local ctx = io.output()
  io.output(stream)

  io.write("\n")
  io.write(indent_str)
  io.write("cout << \"These are the numbers from \" << ")
  io.write("\n")
  io.write(indent_str)
  indent = 8;
  io.write("        ")
  io.write((record.my_start) and record.my_start or ""
)
  io.write(" << \" to \" << ")
  io.write((record.my_end) and record.my_end or ""
)
  io.write(" << endl;")
  indent = 0;
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("for (int i = ")
  io.write((record.my_start) and record.my_start or ""
)
  io.write("; i <= ")
  io.write((record.my_end) and record.my_end or ""
)
  io.write("; ++i)")
  io.write("\n")
  io.write(indent_str)
  io.write("   cout << i << \" \";")
  io.write("\n")
  io.write(indent_str)
  io.write("\n")
  io.write(indent_str)
  io.write("cout << endl;")
  io.write("\n")
  io.write(indent_str)

  -- restore context
  io.output(ctx)
end

function generatep_test_body_loop(stream, indent, my_end, my_start)
  record = {}
  
  record.my_end = my_end
  record.my_start = my_start

  generate_test_body_loop(stream, record, indent)
end

function genstring_test_body_loop(record, indent)
  local id = {}
  local indent_str = ""
  local output = ""
  for i = 1, indent do
    id[#id + 1] = ' '
  end
  indent_str = table.concat(id)

  output = output .. "\n"
  output = output .. indent_str
  output = output .. "cout << \"These are the numbers from \" << "
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "        "
  if (record.my_start) then output = output .. record.my_start end
  output = output .. " << \" to \" << "
  if (record.my_end) then output = output .. record.my_end end
  output = output .. " << endl;"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "for (int i = "
  if (record.my_start) then output = output .. record.my_start end
  output = output .. "; i <= "
  if (record.my_end) then output = output .. record.my_end end
  output = output .. "; ++i)"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "   cout << i << \" \";"
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "\n"
  output = output .. indent_str
  output = output .. "cout << endl;"
  output = output .. "\n"
  output = output .. indent_str
  return output;
end

function genstringp_test_body_loop(indent, my_end, my_start)
  record = {}
  
  record.my_end = my_end
  record.my_start = my_start

  return genstring_test_body_loop (record, indent);
end

function strcnt_test_body_loop(record, indent)
  local length = 0;
  
  length = length + ((record.my_start) and string.len(record.my_start) or 0) * 2;
  length = length + ((record.my_end) and string.len(record.my_end) or 0) * 2;

  return length + 155;
end

function init_test_body_loop_gen_table(record)
  record.my_end = nil
  record.my_start = nil
end

