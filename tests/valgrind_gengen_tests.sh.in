#! @BASH_SHELL@
# --------------------------------------------------------------------- #
#
#  Script to run gengen through VALGRIND.
#
#  Michael Hagemann <michael.hagemann@unibas.ch>
#
#  modified by Lorenzo Bettini <http://www.lorenzobettini.it>
#
#  requires bash extensions
#
# --------------------------------------------------------------------- #

DATE=`date +"%Y-%m-%d_%H%M"`
SUMMARY=valgrind_summary.log

ERROR=0

# --------------------------------------------------------------------- #

# Hack to run valgrind with new glibcs.  Problem: new TLS (thread
# local storage)

#VG_ENV="LD_ASSUME_KERNEL=2.2.5"

VG_PRG="@VALGRIND@"
#VG_ARGS="--num-callers=15 --leak-check=yes --leak-resolution=high"
VG_ARGS="--num-callers=15"
# for gengen don't check leaks, since it's just a compiler
# so we don't worry about deallocating all the memory

VGRIND="${VG_ENV} ${VG_PRG} ${VG_ARGS}"

TMP_LOG=valgrind_tmp.log


vgrind () {
    echo -n "Running $* ..."
    tmp_err=

    if [[ $1 == *.sh ]]; then
        eval $1 ${VGRIND} >${TMP_LOG} 2>&1;
    else
        eval ${VGRIND} $* >${TMP_LOG} 2>&1
    fi;

#    grep -e "definitely lost: [1-9][0-9]*" ${TMP_LOG} >/dev/null 2>&1
#    if test "$?" == "0"; then
#	echo -n " LEAKS!"
#	
#	echo ""         >>${SUMMARY}
#	echo "** " $*   >>${SUMMARY}
#	cat ${TMP_LOG}  >>${SUMMARY}
#	tmp_err=1
#    fi

    grep -e "[1-9][0-9]* error" ${TMP_LOG} >/dev/null 2>&1
    if test "$?" == "0"; then
	echo -n " ERRORS!"
	tmp_err=1
    fi

    if test "x${tmp_err}" == "x"; then
	echo " OK."
    else
	ERROR=1
	echo ""
    fi

    rm -f ${TMP_LOG}
}


# --------------------------------------------------------------------- #

echo "Run at ${DATE}" >${SUMMARY}

vgrind $*

# --------------------------------------------------------------------- #

# cat ${SUMMARY}

exit ${ERROR}
