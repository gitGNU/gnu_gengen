/*
 * File automatically generated by
 * gengen  by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef TEST_BODY_LOOP_GEN_STRUCT_H
#define TEST_BODY_LOOP_GEN_STRUCT_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct test_body_loop_gen_struct
{
  const char *end;
  const char *start;
};

void
generate_test_body_loop(FILE *stream, struct test_body_loop_gen_struct *record, unsigned int indent);

void
generatep_test_body_loop(FILE *stream, unsigned int indent, const char *end, const char *start);

char *
genstring_test_body_loop(struct test_body_loop_gen_struct *record, unsigned int indent);

char *
genstringp_test_body_loop(unsigned int indent, const char *end, const char *start);

int
strcnt_test_body_loop(struct test_body_loop_gen_struct *record, unsigned int indent);

void
init_test_body_loop_gen_struct(struct test_body_loop_gen_struct *record);

void
generate_test_body_loop(FILE *stream, struct test_body_loop_gen_struct *record, unsigned int indent)
{
  char *indent_str;
  unsigned int i;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';
  indent = 0;

  fprintf (stream, "%s", "cout << \"These are the numbers from \" << ");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  indent = 8;
  fprintf (stream, "%s", "        ");
  fprintf (stream, "%s", (record->start ? record->start : ""));
  fprintf (stream, "%s", " << \" to \" << ");
  fprintf (stream, "%s", (record->end ? record->end : ""));
  fprintf (stream, "%s", " << endl;");
  indent = 0;
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "for (int i = ");
  fprintf (stream, "%s", (record->start ? record->start : ""));
  fprintf (stream, "%s", "; i <= ");
  fprintf (stream, "%s", (record->end ? record->end : ""));
  fprintf (stream, "%s", "; ++i)");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "   cout << i << \" \";");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "cout << endl;");

  free (indent_str);
}

void
generatep_test_body_loop(FILE *stream, unsigned int indent, const char *end, const char *start)
{
  struct test_body_loop_gen_struct record;
  
  record.end = end;
  record.start = start;

  generate_test_body_loop (stream, &record, indent);
}

char *
genstring_test_body_loop(struct test_body_loop_gen_struct *record, unsigned int indent)
{
  char *indent_str, *output;
  unsigned int i;
  int len;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';

  len = strcnt_test_body_loop (record, indent);
  output = (char *) malloc (len + 1);
  output[0] = '\0';

  strcat (output, "cout << \"These are the numbers from \" << ");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "        ");
  if (record->start) strcat (output, record->start);
  strcat (output, " << \" to \" << ");
  if (record->end) strcat (output, record->end);
  strcat (output, " << endl;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "for (int i = ");
  if (record->start) strcat (output, record->start);
  strcat (output, "; i <= ");
  if (record->end) strcat (output, record->end);
  strcat (output, "; ++i)");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "   cout << i << \" \";");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "cout << endl;");

  free (indent_str);

  return output;
}

char *
genstringp_test_body_loop(unsigned int indent, const char *end, const char *start)
{
  struct test_body_loop_gen_struct record;
  
  record.end = end;
  record.start = start;

  return genstring_test_body_loop (&record, indent);
}

int
strcnt_test_body_loop(struct test_body_loop_gen_struct *record, unsigned int indent)
{
  int length = 0;
  
  length += (record->start ? strlen (record->start) : 0) * 2;
  length += (record->end ? strlen (record->end) : 0) * 2;

  return length + 149;
}

void
init_test_body_loop_gen_struct(struct test_body_loop_gen_struct *record)
{
  record->end = 0;
  record->start = 0;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif // TEST_BODY_LOOP_GEN_STRUCT_H
