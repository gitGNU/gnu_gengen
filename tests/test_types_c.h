/*
 * File automatically generated by
 * gengen  by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef TEST_TYPES_GEN_STRUCT_H
#define TEST_TYPES_GEN_STRUCT_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct test_types_gen_struct
{
  short mybool;
  int myint;
  const char *mystring;
};

void
generate_test_types(FILE *stream, struct test_types_gen_struct *record, unsigned int indent);

void
generatep_test_types(FILE *stream, unsigned int indent, short mybool, int myint, const char *mystring);

char *
genstring_test_types(struct test_types_gen_struct *record, unsigned int indent);

char *
genstringp_test_types(unsigned int indent, short mybool, int myint, const char *mystring);

int
strcnt_test_types(struct test_types_gen_struct *record, unsigned int indent);

void
init_test_types_gen_struct(struct test_types_gen_struct *record);


static char *
int_to_string(int i)
{
  static char buffer[256];

  snprintf (buffer, 255, "%d", i);

  return buffer;
}


static const char *
bool_to_string(short b)
{
  return (b ? "true" : "false");
}

void
generate_test_types(FILE *stream, struct test_types_gen_struct *record, unsigned int indent)
{
  char *indent_str;
  unsigned int i;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';
  indent = 0;

  fprintf (stream, "%s", "#include <iostream>");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "using namespace std;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "int main()");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "{");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "  cout << \"this is a string: \" << ");
  fprintf (stream, "%s", (record->mystring ? record->mystring : ""));
  fprintf (stream, "%s", " << endl;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "  cout << \"this is an int: \" << ");
  fprintf (stream, "%d", record->myint);
  fprintf (stream, "%s", " << endl;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "  cout << \"this is a bool: \" << ");
  fprintf (stream, "%s", (record->mybool ? "true" : "false"));
  fprintf (stream, "%s", " << endl;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "  return 0;");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);
  fprintf (stream, "%s", "}");
  fprintf (stream, "%s", "\n");
  fprintf (stream, "%s", indent_str);

  free (indent_str);
}

void
generatep_test_types(FILE *stream, unsigned int indent, short mybool, int myint, const char *mystring)
{
  struct test_types_gen_struct record;
  
  record.mybool = mybool;
  record.myint = myint;
  record.mystring = mystring;

  generate_test_types (stream, &record, indent);
}

char *
genstring_test_types(struct test_types_gen_struct *record, unsigned int indent)
{
  char *indent_str, *output;
  unsigned int i;
  int len;

  indent_str = (char *) malloc (indent + 1);
  for (i = 0; i < indent; ++i)
    indent_str[i] = ' ';
  indent_str[indent] = '\0';

  len = strcnt_test_types (record, indent);
  output = (char *) malloc (len + 1);
  output[0] = '\0';

  strcat (output, "#include <iostream>");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "using namespace std;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "int main()");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "{");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  cout << \"this is a string: \" << ");
  if (record->mystring) strcat (output, record->mystring);
  strcat (output, " << endl;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  cout << \"this is an int: \" << ");
  strcat (output, int_to_string (record->myint));
  strcat (output, " << endl;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  cout << \"this is a bool: \" << ");
  strcat (output, bool_to_string (record->mybool));
  strcat (output, " << endl;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "  return 0;");
  strcat (output, "\n");
  strcat (output, indent_str);
  strcat (output, "}");
  strcat (output, "\n");
  strcat (output, indent_str);

  free (indent_str);

  return output;
}

char *
genstringp_test_types(unsigned int indent, short mybool, int myint, const char *mystring)
{
  struct test_types_gen_struct record;
  
  record.mybool = mybool;
  record.myint = myint;
  record.mystring = mystring;

  return genstring_test_types (&record, indent);
}

int
strcnt_test_types(struct test_types_gen_struct *record, unsigned int indent)
{
  int length = 0;
  
  length += (record->mystring ? strlen (record->mystring) : 0) * 1;
  length += strlen (int_to_string (record->myint)) * 1;
  length += strlen (bool_to_string (record->mybool)) * 1;

  return length + 223;
}

void
init_test_types_gen_struct(struct test_types_gen_struct *record)
{
  record->mybool = 0;
  record->myint = 0;
  record->mystring = 0;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif // TEST_TYPES_GEN_STRUCT_H
